MLR: {'memory': None, 'steps': [('scaler', StandardScaler()), ('model', LinearRegression())], 'transform_input': None, 'verbose': False, 'scaler': StandardScaler(), 'model': LinearRegression(), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'model__copy_X': True, 'model__fit_intercept': True, 'model__n_jobs': None, 'model__positive': False}
k-NN: {'memory': None, 'steps': [('scaler', StandardScaler()), ('model', KNeighborsRegressor(algorithm='ball_tree', leaf_size=20, n_neighbors=11,
                    weights='distance'))], 'transform_input': None, 'verbose': False, 'scaler': StandardScaler(), 'model': KNeighborsRegressor(algorithm='ball_tree', leaf_size=20, n_neighbors=11,
                    weights='distance'), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'model__algorithm': 'ball_tree', 'model__leaf_size': 20, 'model__metric': 'minkowski', 'model__metric_params': None, 'model__n_jobs': None, 'model__n_neighbors': 11, 'model__p': 2, 'model__weights': 'distance'}
MLNN-BP: {'memory': None, 'steps': [('scaler', StandardScaler()), ('model', MLPRegressor(hidden_layer_sizes=(100, 50), learning_rate='adaptive',
             max_iter=1000))], 'transform_input': None, 'verbose': False, 'scaler': StandardScaler(), 'model': MLPRegressor(hidden_layer_sizes=(100, 50), learning_rate='adaptive',
             max_iter=1000), 'scaler__copy': True, 'scaler__with_mean': True, 'scaler__with_std': True, 'model__activation': 'relu', 'model__alpha': 0.0001, 'model__batch_size': 'auto', 'model__beta_1': 0.9, 'model__beta_2': 0.999, 'model__early_stopping': False, 'model__epsilon': 1e-08, 'model__hidden_layer_sizes': (100, 50), 'model__learning_rate': 'adaptive', 'model__learning_rate_init': 0.001, 'model__max_fun': 15000, 'model__max_iter': 1000, 'model__momentum': 0.9, 'model__n_iter_no_change': 10, 'model__nesterovs_momentum': True, 'model__power_t': 0.5, 'model__random_state': None, 'model__shuffle': True, 'model__solver': 'adam', 'model__tol': 0.0001, 'model__validation_fraction': 0.1, 'model__verbose': False, 'model__warm_start': False}
